{
  "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
  "type": "synthetic",
  "interval": 3600,
  "timeout": 30,
  "parameters": {
    "regions": [
      "RU, Moscow",
      "EU, West"
    ],
    "pw_script": "const { test, expect } = require('@playwright/test');\n\ntest('—Ç–µ—Å—Ç –±–∏—Ç—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫', async ({ page, request }) => {\n¬† // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É\n¬† await page.goto('https://pingera.ru', { waitUntil: 'domcontentloaded' });\n¬†¬†\n¬† // –ñ–¥—ë–º, –ø–æ–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞–Ω—É—Ç –≤–∏–¥–∏–º—ã\n¬† await page.waitForSelector('img', { timeout: 10000 });\n¬†¬†\n¬† // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n¬† const imageData = await page.evaluate(() => {\n¬† ¬† const images = Array.from(document.querySelectorAll('img'));\n¬† ¬† return images.map(img => ({\n¬† ¬† ¬† src: img.src,\n¬† ¬† ¬† alt: img.alt || 'unnamed image'\n¬† ¬† })).filter(img => img.src && (img.src.startsWith('http') || img.src.startsWith('//')));\n¬† });\n\n¬† console.log(`–ù–∞–π–¥–µ–Ω–æ ${imageData.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);\n\n¬† // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n¬† const imagePromises = imageData.map(async (imgData, index) => {\n¬† ¬† try {\n¬† ¬† ¬† // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n¬† ¬† ¬† const response = await request.head(imgData.src, {¬†\n¬† ¬† ¬† ¬† timeout: 8000,\n¬† ¬† ¬† ¬† ignoreHTTPSErrors: true¬†\n¬† ¬† ¬† });\n¬† ¬† ¬†¬†\n¬† ¬† ¬† const status = response.status();\n¬† ¬† ¬† const isOk = status >= 200 && status < 400;\n¬† ¬† ¬†¬†\n¬† ¬† ¬† console.log(`[${index + 1}/${imageData.length}] ${imgData.src} - ${status} ${isOk ? '‚úì' : '‚úó'}`);\n¬† ¬† ¬†¬†\n¬† ¬† ¬† return {\n¬† ¬† ¬† ¬† url: imgData.src,\n¬† ¬† ¬† ¬† alt: imgData.alt,\n¬† ¬† ¬† ¬† status: status,\n¬† ¬† ¬† ¬† success: isOk\n¬† ¬† ¬† };\n¬† ¬† } catch (error) {\n¬† ¬† ¬† console.error(`[${index + 1}/${imageData.length}] ${imgData.src} - –û–®–ò–ë–ö–ê: ${error.message}`);\n¬† ¬† ¬† return {\n¬† ¬† ¬† ¬† url: imgData.src,\n¬† ¬† ¬† ¬† alt: imgData.alt,\n¬† ¬† ¬† ¬† status: 0,\n¬† ¬† ¬† ¬† success: false,\n¬† ¬† ¬† ¬† error: error.message\n¬† ¬† ¬† };\n¬† ¬† }\n¬† });\n\n¬† // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—â–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º\n¬† const results = await Promise.allSettled(imagePromises);\n¬†¬†\n¬† // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n¬† const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;\n¬† const failed = results.filter(r => r.status === 'fulfilled' && !r.value.success).length;\n¬† const errors = results.filter(r => r.status === 'rejected').length;\n¬†¬†\n¬† console.log(`\\n–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`);\n¬† console.log(`‚úì –î–æ—Å—Ç—É–ø–Ω—ã—Ö: ${successful}`);\n¬† console.log(`‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ${failed}`);\n¬† console.log(`‚ö† –û—à–∏–±–æ–∫: ${errors}`);\n¬† console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${imageData.length}`);\n\n¬† // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã (–±–æ–ª–µ–µ 80%)\n¬† const successRate = successful / imageData.length;\n¬† expect(successRate).toBeGreaterThan(0.8);\n¬†¬†\n¬† console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: ${(successRate * 100).toFixed(1)}%`);\n});"
  },
  "marketplace": {
    "tags": [
      "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      "–æ—à–∏–±–∫–∏",
      "–∫–æ–Ω—Ç–µ–Ω—Ç",
      "–±–∏—Ç—ã–µ-—Å—Å—ã–ª–∫–∏"
    ],
    "name": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
    "description": "–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –±–∏—Ç—ã—Ö –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
  }
}
